module generate-safe

imports include/BufferC
imports to-c/generate
imports to-c/annotate-returns
imports runtime/types/-
imports runtime/editor/annotations 
  
rules // buffer operations
	
/**************************************************
	Declaration, Allocation, Reallocation
***************************************************/	
	
	/* // deprecated: when used by itself will cause memory leaks.	
	gen-c-special :
		FunctionCall(Create(), es) -> $[alloc_buf([exp])]
		where
			exp := <genc><Hd> es
    */     
    // Allow create() only when declaring or assigning to prevent memory leaks
	// Allocate buffer with size zero
	
	gen-c-special :	
		DeclStm(Decl(Buffer(), Decl(Identifier(var))))	-> 
			$[buffer * [var];
			[var] = alloc_buf(0);]      
			
	gen-c-special :
        DeclInit(
            Buffer()
          , Decl(Identifier(var))
          , FunctionCall(Create(), es)
          )
		 -> $[buffer * [var] = alloc_buf([exp])]
		where
			exp := <genc><Hd> es
			    
    gen-c-special :
       Assign(
            Var(Identifier(var))
          , Assign()
          , FunctionCall(Create(), es)
          )
		 -> $[[var] = realloc_buf([var],[exp])]
		where
			exp := <genc><Hd> es
			
	//TODO: Modify the rewrite to avoid a lonely semicolomn		
	gen-c-special :
		Exp(FunctionCall(Create(), _ )) -> ""
			
	gen-c-special :	
		Buffer()	->	$[buffer *]
	
	gen-c-special :
	    Assign(
            Var(Identifier(var))
          , Assign()
          , FunctionCall(Create(), [Decimal(size)]) )	->
			$[realloc_buf([var], [size]) ]

/**************************************************
	Misc
***************************************************/	
	gen-c-special :
		Null() -> $[NULL]
  		
	gen-c-special :
		String(str) -> $[[str]]
	
	gen-c-special :	
		r@Return(Some(e)) -> 
		$[ [frees]
		    return [<genc>e];]
		where
			frees := <get-vars; filter(free-var-special(|e))>
		
	free-var-special (|e) :
		x -> $[free([x]);
		]	
		where debug;
			x1 := <strip-annos; debug(!"x1 ")> Var(Identifier(x))
		;	<strip-annos; not(?x1);debug(!"checked")> e
					
	gen-c-special :	
		r@Return(None()) -> 
		$[ [frees]
		    return;]
		where
			frees := <get-vars; map(free-var)>
			//vars := <get-vars; strip-annos> r
			//;	frees := <map(free-var)> vars
	
	free-var () :
		x -> $[free([x]);
		]
		
	gen-c-special :	
		CommaExp(e) -> <genc>e
	
/**************************************************
	Buffer Size
***************************************************/	

	gen-c-special :
		Field(e, Length()) -> $[buf_size([<genc>e])]
		
/**************************************************
	Assignment & Reading an element
***************************************************/			

	gen-c-special :
		Assign(ArrayField(e1, e_idx), Assign(), e2) -> $[assign_char([<genc>e1], [<genc>e_idx], [<genc>e2])]
		
	gen-c-special :
		ArrayField(e1, e2) -> $[read_element([<genc>e1], [<genc>e2])]
			
	gen-c-special :
		Assign(x, Assign(), String(s)) -> $[assign_stringliteral([<genc>x], [s], [len])]
		where
			<?Buffer()><get-type>x
		;	len := <subt>(<string-length>s,2)
			
	gen-c-special :
		Assign(Var(Identifier(var1)), Assign(), Var(Identifier(var2))) -> 
		$[ free([var1]);
		[var1] = copy([var2])]
		where
			<?Buffer()><get-type>var1
		;	<?Buffer()><get-type>var2
		
		
	gen-c-special :
	    Assign(Var(Identifier(var1)) , Assign(), func_call) ->
	    $[ free([var1]);
		 [var1] = [func_call']]
		where
			func_call' := <genc>func_call
		;	<?Buffer()><get-type>var1
		; 	<?Buffer()><get-type>func_call

	
/**************************************************
	Printing
***************************************************/	

	gen-c-special :
		FunctionCall(Print(), es) -> $[bufferc_print([exp])]
		where
		exp := <genc><Hd>es
	
	is-it-buffer:
		var -> $[[<genc>var]->ptr]
		where
		<?Buffer()><get-type>var
	;	<not(?String(_))>var
	
	is-it-buffer:
		var -> $[[<genc>var]]
		where
		<?Buffer()><get-type>var
	;	<?String(_)>var
	
	is-it-buffer:
		var -> $[[<genc>var]]
	
	//PRINTF_ERROR is a MACRO defined in buffer.h
	gen-c-special :
		FunctionCall(PrintF(), es) -> 
		$[
		if (printf_is_safe([format_string],[arg_count]))
		{
			printf([args]);
		}
		else
		{
			PRINTF_ERROR;
		}]
		where args := <mapsep(is-it-buffer|", ")>es
		where arg_count := <subt>(<length>es, 1)
		where format_string := <Hd> args
		
	//deprecated
	/*	gen-c-special :
			FunctionCall(PrintF(), es) -> $[printf([<mapsep(is-it-buffer|", ")>es])]
	*/
			
/**************************************************
	File Operations
***************************************************/		
	gen-c-special :
		FunctionCall(Fopen(), es) -> $[bufferc_fopen[<genc>es]]
			
	gen-c-special :
		FunctionCall(Fread(), es) -> $[bufferc_fread[<genc>es]]
		