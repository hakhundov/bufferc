module types/types

imports

  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  runtime/properties/-
  runtime/relations/-


signature constructors

  

rules // functions
  

rules // relations
  

rules // rules
  
  create-type-task(|ctx) :
    Void() -> <task-create-id(|ctx,[x235])> x235
    where
      x235 := <type-is(|ctx)> Void()
  
  create-type-task(|ctx) :
    Int() -> <task-create-id(|ctx,[x236])> x236
    where
      x236 := <type-is(|ctx)> Int()
  
  create-type-task(|ctx) :
    Buffer() -> <task-create-id(|ctx,[x237])> x237
    where
      x237 := <type-is(|ctx)> Buffer()
  
  create-type-task(|ctx) :
    Bool() -> <task-create-id(|ctx,[x238])> x238
    where
      x238 := <type-is(|ctx)> Bool()
  
  create-type-task(|ctx) :
    Char() -> <task-create-id(|ctx,[x239])> x239
    where
      x239 := <type-is(|ctx)> Char()
  
  create-type-task(|ctx) :
    FILE() -> <task-create-id(|ctx,[x240])> x240
    where
      x240 := <type-is(|ctx)> FILE()
  
  create-type-task(|ctx) :
    Decimal(val) -> <task-create-id(|ctx,[x241])> x241
    where
      x241 := <type-is(|ctx)> Int()
  
  create-type-task(|ctx) :
    True() -> <task-create-id(|ctx,[x242])> x242
    where
      x242 := <type-is(|ctx)> Bool()
  
  create-type-task(|ctx) :
    False() -> <task-create-id(|ctx,[x243])> x243
    where
      x243 := <type-is(|ctx)> Bool()
  
  create-type-task(|ctx) :
    Char(val) -> <task-create-id(|ctx,[x244])> x244
    where
      x244 := <type-is(|ctx)> Char()
  
  create-type-task(|ctx) :
    String(val) -> <task-create-id(|ctx,[x245])> x245
    where
      x245 := <type-is(|ctx)> Buffer()
  
  create-type-task(|ctx) :
    Null() -> <task-create-id(|ctx,[x246])> x246
    where
      x246 := <type-is(|ctx)> Buffer()
  
  create-type-task(|ctx) :
    Param(t, Decl(Identifier(name))) -> <task-create-id(|ctx,[ty])> ty
    where
      ty := <type-task(|ctx)> t
  
  create-type-task(|ctx) :
    Var(Identifier(x)) -> <task-create-id(|ctx,[t])> t
    where
      t := <type-lookup(|ctx)> x
  
  nabl-constraint(|ctx) :
    DeclInit(t, Decl(Identifier(x)), e) -> <fail>
    where
      e_ty := <type-task(|ctx)> e;
      ty := <type-task(|ctx); task-create-id(|ctx, [e_ty])> t;
      eq180 := <type-match(|ctx, ty); task-create-id(|ctx, [ty])> e_ty;
      <task-create-error-on-failure(|ctx, eq180, [ty, " expected"])> e
  
  create-type-task(|ctx) :
    CommaExp(e) -> <task-create-id(|ctx,[t])> t
    where
      t := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    Addition(e1, e2) -> <task-create-id(|ctx,[x247])> x247
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq181 := <type-match(|ctx, Int()); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq181, "int expected")> e1;
      eq182 := <type-match(|ctx, Int()); task-create-id(|ctx, [eq181])> ty2;
      <task-create-error-on-failure(|ctx, eq182, "int expected")> e2;
      x247 := <type-is(|ctx); task-create-id(|ctx, [eq182])> Int()
  
  create-type-task(|ctx) :
    Subtraction(e1, e2) -> <task-create-id(|ctx,[x247])> x247
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq183 := <type-match(|ctx, Int()); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq183, "int expected")> e1;
      eq184 := <type-match(|ctx, Int()); task-create-id(|ctx, [eq183])> ty2;
      <task-create-error-on-failure(|ctx, eq184, "int expected")> e2;
      x247 := <type-is(|ctx); task-create-id(|ctx, [eq184])> Int()
  
  create-type-task(|ctx) :
    Multiplication(e1, e2) -> <task-create-id(|ctx,[x247])> x247
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq185 := <type-match(|ctx, Int()); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq185, "int expected")> e1;
      eq186 := <type-match(|ctx, Int()); task-create-id(|ctx, [eq185])> ty2;
      <task-create-error-on-failure(|ctx, eq186, "int expected")> e2;
      x247 := <type-is(|ctx); task-create-id(|ctx, [eq186])> Int()
  
  create-type-task(|ctx) :
    Division(e1, e2) -> <task-create-id(|ctx,[x247])> x247
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq187 := <type-match(|ctx, Int()); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq187, "int expected")> e1;
      eq188 := <type-match(|ctx, Int()); task-create-id(|ctx, [eq187])> ty2;
      <task-create-error-on-failure(|ctx, eq188, "int expected")> e2;
      x247 := <type-is(|ctx); task-create-id(|ctx, [eq188])> Int()
  
  create-type-task(|ctx) :
    DecrementPostfix(e) -> <task-create-id(|ctx,[eq189])> ty
    where
      ty := <type-task(|ctx)> e;
      eq189 := <type-match(|ctx, Int()); task-create-id(|ctx, [ty])> ty;
      <task-create-error-on-failure(|ctx, eq189, "int expected")> e
  
  create-type-task(|ctx) :
    IncrementPostfix(e) -> <task-create-id(|ctx,[eq190])> ty
    where
      ty := <type-task(|ctx)> e;
      eq190 := <type-match(|ctx, Int()); task-create-id(|ctx, [ty])> ty;
      <task-create-error-on-failure(|ctx, eq190, "int expected")> e
  
  create-type-task(|ctx) :
    GreaterThan(e1, e2) -> <task-create-id(|ctx,[x248])> x248
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq191 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq191, "types not compatible")> e2;
      x248 := <type-is(|ctx); task-create-id(|ctx, [eq191])> Bool()
  
  create-type-task(|ctx) :
    GreaterThanEqual(e1, e2) -> <task-create-id(|ctx,[x248])> x248
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq192 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq192, "types not compatible")> e2;
      x248 := <type-is(|ctx); task-create-id(|ctx, [eq192])> Bool()
  
  create-type-task(|ctx) :
    Equal(e1, e2) -> <task-create-id(|ctx,[x248])> x248
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq193 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq193, "types not compatible")> e2;
      x248 := <type-is(|ctx); task-create-id(|ctx, [eq193])> Bool()
  
  create-type-task(|ctx) :
    Inequal(e1, e2) -> <task-create-id(|ctx,[x248])> x248
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq194 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq194, "types not compatible")> e2;
      x248 := <type-is(|ctx); task-create-id(|ctx, [eq194])> Bool()
  
  create-type-task(|ctx) :
    LessThan(e1, e2) -> <task-create-id(|ctx,[x248])> x248
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq195 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq195, "types not compatible")> e2;
      x248 := <type-is(|ctx); task-create-id(|ctx, [eq195])> Bool()
  
  create-type-task(|ctx) :
    LessThanEqual(e1, e2) -> <task-create-id(|ctx,[x248])> x248
    where
      ty1 := <type-task(|ctx)> e1;
      ty2 := <type-task(|ctx); task-create-id(|ctx, [ty1])> e2;
      eq196 := <type-match(|ctx, ty2); task-create-id(|ctx, [ty2])> ty1;
      <task-create-error-on-failure(|ctx, eq196, "types not compatible")> e2;
      x248 := <type-is(|ctx); task-create-id(|ctx, [eq196])> Bool()
  
  create-type-task(|ctx) :
    Or(e1, e2) -> <task-create-id(|ctx,[x251])> x251
    where
      x249 := <type-task(|ctx)> e1;
      eq197 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x249])> x249;
      <task-create-error-on-failure(|ctx, eq197, "bool expected")> e1;
      x250 := <type-task(|ctx); task-create-id(|ctx, [eq197])> e2;
      eq198 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x250])> x250;
      <task-create-error-on-failure(|ctx, eq198, "bool expected")> e2;
      x251 := <type-is(|ctx); task-create-id(|ctx, [eq198])> Bool()
  
  create-type-task(|ctx) :
    And(e1, e2) -> <task-create-id(|ctx,[x251])> x251
    where
      x249 := <type-task(|ctx)> e1;
      eq199 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x249])> x249;
      <task-create-error-on-failure(|ctx, eq199, "bool expected")> e1;
      x250 := <type-task(|ctx); task-create-id(|ctx, [eq199])> e2;
      eq200 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x250])> x250;
      <task-create-error-on-failure(|ctx, eq200, "bool expected")> e2;
      x251 := <type-is(|ctx); task-create-id(|ctx, [eq200])> Bool()
  
  create-type-task(|ctx) :
    Not(e) -> <task-create-id(|ctx,[x253])> x253
    where
      x252 := <type-task(|ctx)> e;
      eq201 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x252])> x252;
      <task-create-error-on-failure(|ctx, eq201, "bool expected")> e;
      x253 := <type-is(|ctx); task-create-id(|ctx, [eq201])> Bool()
  
  create-type-task(|ctx) :
    e@FunctionCall(Identifier(name), es) -> <task-create-id(|ctx,[eq202])> ty
    where
      x254 := <type-lookup(|ctx)> name;
      ty := <new-task(|ctx)> Rewrite("proj10", x254); task-create-id(|ctx, [x254]);
      tys := <new-task(|ctx)> Rewrite("proj11", x254); task-create-id(|ctx, [ty]);
      tys_es := <type-task(|ctx); task-create-id(|ctx, [tys])> es;
      eq202 := <type-match(|ctx, tys_es); task-create-id(|ctx, [tys_es])> tys;
      <task-create-error-on-failure(|ctx, eq202, "argument types not compatible")> e
  
  create-type-task(|ctx) :
    FunctionCall(Create(), [e]) -> <task-create-id(|ctx,[x256])> x256
    where
      x255 := <type-task(|ctx)> e;
      eq203 := <type-match(|ctx, Int()); task-create-id(|ctx, [x255])> x255;
      <task-create-error-on-failure(|ctx, eq203, "int expected")> e;
      x256 := <type-is(|ctx); task-create-id(|ctx, [eq203])> Buffer()
  
  create-type-task(|ctx) :
    FunctionCall(Print(), [e]) -> <task-create-id(|ctx,[x258])> x258
    where
      x257 := <type-task(|ctx)> e;
      eq204 := <type-match(|ctx, Buffer()); task-create-id(|ctx, [x257])> x257;
      <task-create-error-on-failure(|ctx, eq204, "buffer expected")> e;
      x258 := <type-is(|ctx); task-create-id(|ctx, [eq204])> Void()
  
  create-type-task(|ctx) :
    FunctionCall(PrintF(), [e1, e2]) -> <task-create-id(|ctx,[x261])> x261
    where
      x259 := <type-task(|ctx)> e1;
      eq205 := <type-match(|ctx, Buffer()); task-create-id(|ctx, [x259])> x259;
      <task-create-error-on-failure(|ctx, eq205, "buffer expected")> e1;
      x260 := <type-task(|ctx); task-create-id(|ctx, [eq205])> e2;
      eq206 := <type-match(|ctx, Buffer()); task-create-id(|ctx, [x260])> x260;
      <task-create-error-on-failure(|ctx, eq206, "buffer expected")> e2;
      x261 := <type-is(|ctx); task-create-id(|ctx, [eq206])> Void()
  
  create-type-task(|ctx) :
    FunctionCall(Fopen(), [e1, e2]) -> <task-create-id(|ctx,[x264])> x264
    where
      x262 := <type-task(|ctx)> e1;
      eq207 := <type-match(|ctx, Buffer()); task-create-id(|ctx, [x262])> x262;
      <task-create-error-on-failure(|ctx, eq207, "buffer expected")> e1;
      x263 := <type-task(|ctx); task-create-id(|ctx, [eq207])> e2;
      eq208 := <type-match(|ctx, Buffer()); task-create-id(|ctx, [x263])> x263;
      <task-create-error-on-failure(|ctx, eq208, "buffer expected")> e2;
      x264 := <type-is(|ctx); task-create-id(|ctx, [eq208])> FILE()
  
  create-type-task(|ctx) :
    FunctionCall(Fread(), [e1, e2]) -> <task-create-id(|ctx,[x267])> x267
    where
      x265 := <type-task(|ctx)> e1;
      eq209 := <type-match(|ctx, Buffer()); task-create-id(|ctx, [x265])> x265;
      <task-create-error-on-failure(|ctx, eq209, "buffer expected")> e1;
      x266 := <type-task(|ctx); task-create-id(|ctx, [eq209])> e2;
      eq210 := <type-match(|ctx, FILE()); task-create-id(|ctx, [x266])> x266;
      <task-create-error-on-failure(|ctx, eq210, "buffer expected")> e2;
      x267 := <type-is(|ctx); task-create-id(|ctx, [eq210])> Void()
  
  create-type-task(|ctx) :
    Field(e, Length()) -> <task-create-id(|ctx,[x269])> x269
    where
      x268 := <type-task(|ctx)> e;
      eq211 := <type-match(|ctx, Buffer()); task-create-id(|ctx, [x268])> x268;
      <task-create-error-on-failure(|ctx, eq211, "buffer expected")> e;
      x269 := <type-is(|ctx); task-create-id(|ctx, [eq211])> Int()
  
  create-type-task(|ctx) :
    ArrayField(e1, e2) -> <task-create-id(|ctx,[x272])> x272
    where
      x270 := <type-task(|ctx)> e1;
      eq212 := <type-match(|ctx, Buffer()); task-create-id(|ctx, [x270])> x270;
      <task-create-error-on-failure(|ctx, eq212, "buffer expected")> e1;
      x271 := <type-task(|ctx); task-create-id(|ctx, [eq212])> e2;
      eq213 := <type-match(|ctx, Int()); task-create-id(|ctx, [x271])> x271;
      <task-create-error-on-failure(|ctx, eq213, "int expected")> e2;
      x272 := <type-is(|ctx); task-create-id(|ctx, [eq213])> Char()
  
  create-type-task(|ctx) :
    Assign(ArrayField(e1, e2), Assign(), e3) -> <task-create-id(|ctx,[x276])> x276
    where
      x273 := <type-task(|ctx)> e1;
      eq214 := <type-match(|ctx, Buffer()); task-create-id(|ctx, [x273])> x273;
      <task-create-error-on-failure(|ctx, eq214, "buffer expected")> e1;
      x274 := <type-task(|ctx); task-create-id(|ctx, [eq214])> e2;
      eq215 := <type-match(|ctx, Int()); task-create-id(|ctx, [x274])> x274;
      <task-create-error-on-failure(|ctx, eq215, "int expected")> e2;
      x275 := <type-task(|ctx); task-create-id(|ctx, [eq215])> e3;
      eq216 := <type-match(|ctx, Char()); task-create-id(|ctx, [x275])> x275;
      <task-create-error-on-failure(|ctx, eq216, "char expected")> e3;
      x276 := <type-is(|ctx); task-create-id(|ctx, [eq216])> Char()
  
  create-type-task(|ctx) :
    Assign(Var(Identifier(x)), Assign(), e) -> <task-create-id(|ctx,[eq217])> ty
    where
      ty := <type-lookup(|ctx)> x;
      ty_e := <type-task(|ctx); task-create-id(|ctx, [ty])> e;
      eq217 := <type-match(|ctx, ty); task-create-id(|ctx, [ty_e])> ty_e;
      <task-create-error-on-failure(|ctx, eq217, [ty, " expected"])> e
  
  nabl-constraint(|ctx) :
    If(e, stm) -> <fail>
    where
      x277 := <type-task(|ctx)> e;
      eq218 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x277])> x277;
      <task-create-error-on-failure(|ctx, eq218, "bool expected")> e
  
  nabl-constraint(|ctx) :
    While(e, stm) -> <fail>
    where
      x277 := <type-task(|ctx)> e;
      eq219 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x277])> x277;
      <task-create-error-on-failure(|ctx, eq219, "bool expected")> e
  
  nabl-constraint(|ctx) :
    DoWhile(stm, e) -> <fail>
    where
      x277 := <type-task(|ctx)> e;
      eq220 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x277])> x277;
      <task-create-error-on-failure(|ctx, eq220, "bool expected")> e
  
  nabl-constraint(|ctx) :
    IfElse(e, stm1, stm2) -> <fail>
    where
      x278 := <type-task(|ctx)> e;
      eq221 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x278])> x278;
      <task-create-error-on-failure(|ctx, eq221, "bool expected")> e
  
  nabl-constraint(|ctx) :
    ForDec(stm1, Some(e), stm2, stm3) -> <fail>
    where
      x279 := <type-task(|ctx)> e;
      eq222 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x279])> x279;
      <task-create-error-on-failure(|ctx, eq222, "bool expected")> e
  
  nabl-constraint(|ctx) :
    For(stm1, Some(e), stm2, stm3) -> <fail>
    where
      x280 := <type-task(|ctx)> e;
      eq223 := <type-match(|ctx, Bool()); task-create-id(|ctx, [x280])> x280;
      <task-create-error-on-failure(|ctx, eq223, "bool expected")> e
  
  nabl-constraint(|ctx) :
    Exit(Some(e)) -> <fail>
    where
      x281 := <type-task(|ctx)> e;
      eq224 := <type-match(|ctx, Int()); task-create-id(|ctx, [x281])> x281;
      <task-create-error-on-failure(|ctx, eq224, "int expected")> e
  

rules // projections
  
  task-rewrite :
    ("proj11", (_, tys)) -> tys
  
  task-rewrite :
    ("proj10", (ty, _)) -> ty
  
