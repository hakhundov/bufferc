module libstring_tests imports libstring {
	void test_str_copy() {
		buffer a = create(5);
		buffer b = create(5);
		buffer c;
		buffer d = create(10);
		a = "5char";
		d = "10char1234";
		
		// Using str_copy on an initialized dst buffer b, this should work.
		str_copy(b, a);
		// b should equal "5char" with length == 5
		
		// Using str_copy on an uninitialized dst buffer c, this shouldn't work.
		str_copy(c, a);
		
		// Using str_copy on an uninitialized src buffer c, this shouldn't work.
		str_copy(a, c);
		
		// Using str_copy on an initialized dst buffer d with d.length > a.length, this should work.
		str_copy(d, a);
		// d should equal "5char" with length == 10
	}
	
	void test_str_clone() {
		buffer a = create(5);
		buffer b = create(5);
		buffer c;
		buffer d = create(10);
		buffer e;
		a = "5char";
		d = "10char1234";
		
		// Using str_clone on an initialized dst buffer b, this should work.
		b = str_clone(a);
		// b should equal "5char"
		
		// Using str_clone on an uninitialized dst buffer c, this should work.
		c = str_clone(a);
		// c should equal "5char"
		
		// Using str_clone on a larger dst buffer d, this should work.
		d = str_clone(a);
		// d should equal "5char" with buflength == 5
		
		// Using str_clone on an uninitialized src buffer e, this shouldn't work.
		a = str_clone(e);
	}
	
	void test_str_concat() {
		buffer a = create(5);
		buffer b = create(10);
		buffer c;
		buffer e;
		a = "5char";
		b = "10char1234";
		
		// Using str_concat on two initialized buffers, this should work.
		e = str_concat(a, b);
		// e should equal "5char10char1234", with length == 15
		
		// Using str_concat on uninitialized buffer s1, this shouldn't work.
		e = str_concat(c, a);
		
		// Using str_concat on uninitialized buffer s2, this shouldn't work.
		e = str_concat(a, c);
	}
	
	void test_str_trim() {
		buffer a = create(5);
		buffer b = create(5);
		buffer c = create(5);
		buffer d = create(5);
		buffer e;
		buffer res;
		a = "  3  ";
		b = "  345";
		c = "123  ";
		d = "12345";
		
		// Both leading and trailing spaces.
		res = str_trim(a);
		// res should equal "3" with length == 1
		
		// Only leading spaces.
		res = str_trim(b);
		// res should equal "345" with length == 3
		
		// Only trailing spaces.
		res = str_trim(c);
		// res should equal "123" with length == 3
		
		// No leading or trailing spaces.
		res = str_trim(d);
		// res should equal "12345" with length == 5
		
		// Uninitialized src buffer, this shouldn't work.
		res = str_trim(e);
		
	}
	
	void test_str_equal() {
		buffer a = create(5);
		buffer b = create(5);
		buffer c = create(10);
		buffer d = create(5);
		buffer e = create(5);
		buffer f;
		boolean res;
		
		a = "12345";
		b = "12345";
		c = "1234567890";
		d = "54321";
		e = "1234";
		
		// str_equal on two initialized buffers, should work.
		res = str_equal(a, b);	
		// This should return true
		
		// str_equal on two buffers with different length, should work.
		res = str_equal(a, c);	
		// This should return false
		
		// str_equal on two equal length but different buffers, should work.
		res = str_equal(a, d);	
		// This should return false
		
		// str_equal on two equal size buffers but different length strings, should work.
		res = str_equal(a, e);	
		// This should return false
		
		// str_equal on an uninitialized buffer, shouldn't work.
		res = str_equal(a, f);	
	}
	
	void test_str_compare() {
		buffer a = create(5);
		buffer b = create(5);
		buffer c = create(10);
		buffer d = create(5);
		buffer f;
		int res;
		
		a = "12345";
		b = "12345";
		c = "1234567890";
		d = "54321";
		
		// str_compare on two initialized buffers, should work.
		res = str_compare(a, b);	
		// Should return 0
		
		// str_compare on two initialized buffers of different sizes, should work.
		res = str_compare(a, c);	
		// Should return 0
		
		// str_compare on two initialized buffers of different sizes, should work.
		res = str_compare(c, a);	
		// Should return 0
		
		// str_compare on two initialized buffers which are different, should work.
		res = str_compare(a, d);	
		// Should return -1
		
		// str_compare on two initialized buffers which are different, should work.
		res = str_compare(d, a);	
		// Should return 1
		
		// str_compare on an uninitialized buffer, shouldn't work.
		res = str_compare(a, f);	
		
		// str_compare on an uninitialized buffer, shouldn't work.
		res = str_compare(f, a);	
	}
}
