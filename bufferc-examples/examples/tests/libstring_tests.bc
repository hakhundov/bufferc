module libstring_tests imports libstring {
	void test_str_copy() {
		printf("Testing: str_copy\n\n");
		buffer a = create(5);
		buffer b = create(5);
		buffer c;
		buffer d = create(10);
		a = "5char";
		d = "10char1234";

		//inspect outputs of the following tests:

		// Using str_copy on an initialized dst buffer b, this should work.
		// b should equal "5char" with length == 5
		str_copy(b, a);
		print(b);

		// Using str_copy on an uninitialized dst buffer c, nothing happens
		str_copy(c, a);
		print(c);

		// Using str_copy on an uninitialized src buffer c, a remains the same a = "5char"
		str_copy(a, c);
		print(a);

		// Using str_copy on an initialized dst buffer d with d.length > a.length, this should work.
		// d should equal "5charr1234" with length == 10
		str_copy(d, a);
		print(d);

		//inspect code
		printf("-- Done test -- \n");
	}

	void test_str_clone() {
		printf("Testing: str_clone\n\n");
		buffer a = create(5);
		buffer b = create(5);
		buffer c;
		buffer d = create(10);
		buffer e;
		a = "5char";
		d = "10char1234";

		//inspect outputs of the following tests:

		// Using str_clone on an initialized dst buffer b, this should work.
		// b should equal "5char"
		b = str_clone(a);
		print(b);

		// Using str_clone on an uninitialized dst buffer c, this should work.
		// c should equal "5char"
		c = str_clone(a);
		print(c);

		// Using str_clone on a larger dst buffer d, this should work.
		// d should equal "5char" with buflength == 5
		d = str_clone(a);
		print(d);

		// Using str_clone on an uninitialized src buffer e, this simple will clone an empty buffer.
		a = str_clone(e);
		print(a); //prints nothing
		printf("-- Done test -- \n");
	}

	void test_str_concat() {
		printf("Testing: str_concat\n\n");
		buffer a = create(5);
		buffer b = create(10);
		buffer c;
		buffer e;
		a = "5char";
		b = "10char1234";

		//inspect outputs of the following tests:

		// Using str_concat on two initialized buffers, this should work.
		// e should equal "5char10char1234", with length == 15
		e = str_concat(a, b);
		print(e);

		// Using str_concat on uninitialized buffer s1, c is empty, hence we should only get a
		e = str_concat(c, a);
		print(e);

		// Using str_concat on uninitialized buffer s2, same as above
		e = str_concat(a, c);
		print(e);
		printf("-- Done test -- \n");
	}

	void test_str_trim() {
		printf("Testing: str_trim\n\n");
		buffer a = create(5);
		buffer b = create(5);
		buffer c = create(5);
		buffer d = create(5);
		buffer e;
		buffer res;
		a = "  3  ";
		b = "  345";
		c = "123  ";
		d = "12345";

		//inspect outputs of the following tests:

		// Both leading and trailing spaces.
		// res should equal "3" with length == 1
		res = str_trim(a);
		printf("res: %s , length: %d \n", res, res.length);

		// Only leading spaces.
		// res should equal "345" with length == 3
		res = str_trim(b);
		printf("res: %s , length: %d \n", res, res.length);

		// Only trailing spaces.
		// res should equal "123" with length == 3
		res = str_trim(c);
		printf("res: %s , length: %d \n", res, res.length);

		// No leading or trailing spaces.
		// res should equal "12345" with length == 5
		res = str_trim(d);
		printf("res: %s , length: %d \n", res, res.length);

		// Uninitialized src buffer, returns the same empty buffer
		res = str_trim(e);
		printf("res: %s , length: %d \n", res, res.length);

		printf("-- Done test -- \n");
	}

	void test_str_equal() {
		printf("Testing: str_equal\n\n");
		buffer a = create(5);
		buffer b = create(5);
		buffer c = create(10);
		buffer d = create(5);
		buffer e = create(5);
		buffer f;
		boolean res;

		a = "12345";
		b = "12345";
		c = "1234567890";
		d = "54321";
		e = "1234";

		//inspect outputs of the following tests:

		// str_equal on two initialized buffers, should work.
		// This should return true
		res = str_equal(a, b);
		printf("str_equal res: %d \n", res);

		// str_equal on two buffers with different length, should work.
		// This should return false
		res = str_equal(a, c);
		printf("str_equal res: %d \n", res);

		// str_equal on two equal length but different buffers, should work.
		// This should return false
		res = str_equal(a, d);
		printf("str_equal res: %d \n", res);

		// str_equal on two equal size buffers but different length strings, should work.
		// This should return false
		res = str_equal(a, e);
		printf("str_equal res: %d \n", res);

		// str_equal on an uninitialized buffer, should work.
		// This should return false
		res = str_equal(a, f);
		printf("str_equal res: %d \n", res);

		printf("-- Done test -- \n");
	}

	void test_str_compare() {
		printf("Testing: str_compare\n\n");
		buffer a = create(5);
		buffer b = create(5);
		buffer c = create(10);
		buffer d = create(5);
		buffer e;
		buffer f;
		int res;

		a = "12345";
		b = "12345";
		c = "1234567890";
		d = "54321";

		//inspect outputs of the following tests:

		// str_compare on two initialized buffers, should work.
		// Should return 0
		res = str_compare(a, b);
		printf("str_compare res 1: %d \n", res);

		// str_compare on two initialized buffers of different sizes, should work.
		// Should return 0
		res = str_compare(a, c);
		printf("str_compare res 2: %d \n", res);

		// str_compare on two initialized buffers of different sizes, should work.
		// Should return 0
		res = str_compare(c, a);
		printf("str_compare res 3: %d \n", res);

		// str_compare on two initialized buffers which are different, should work.
		// Should return -1
		res = str_compare(a, d);
		printf("str_compare res 4: %d \n", res);

		// str_compare on two initialized buffers which are different, should work.
		// Should return 1
		res = str_compare(d, a);
		printf("str_compare res 5: %d \n", res);

		// str_compare on an uninitialized buffer, should return  1 since s2 is a null str
		res = str_compare(a, f);
		printf("str_compare res 6: %d \n", res);

		// str_compare on an uninitialized buffer, should return  -1 since s1 is a null str
		res = str_compare(f, a);
		printf("str_compare res 7: %d \n", res);

		// str_compare on both uninitialized buffer, should return 0 (both same)
		res = str_compare(e, f);
		printf("str_compare res 8: %d \n", res);

		printf("-- Done test -- \n");
	}


	int main()
	{
		printf("**** Running libstring tests ****\n\n");
		
		//Run all TESTs

		test_str_copy();

		test_str_clone();

		test_str_concat();

		test_str_trim();

		test_str_equal();

		test_str_compare();

		printf("Done with all tests \n\n");

		return 1;
	}

}